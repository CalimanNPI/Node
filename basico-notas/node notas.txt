node -v checa la version de nodejs

Y para usar las funciones almacenamos todo ese modulo dentro de una const | const matemática = require("./matematica.js")

 pero si queremos llamar a una función de ese modulo tenemos que hacerlo con la nomenclatura del punto | matematica.dividir(1,2)

----- Código asíncrono -----------------------
La tarea de crear un archivo no es tarea de node es tarea del SO, node le dice:
-sistema operativo crea un archivo cuando termines ejecuta la función, el callback
-mientras termina de crear el archivo sigue ejecutando el código
-así que veremos en consola primero el ultima línea de código y después el archivo creado

------- NPM -------------------------
NPM = Node Package Manager (administrador de paquetes de node)

NPM Sirve para instalar paquetes que vienen de otra parte, que no vienen en node.
En nuestro caso instalaremos uno de colors para darle color a los textos de consola
- comando dentro del proyecto y lo instala desde npmjs.com| npm install colors

Después de ejecutar el comando, en mi proyecto veo una carpeta nueva (node_modules) y un archivo llamado package-lock.json | así trabaja internamente npm y node
- node_modules es para contener los nuevos módulos que instalamos
- package-lock.json lista que módulos se han instalado

YA LUEGO PUEDO IMPORTAR ESE MODULO EN MIS ARCHIVOS | const colors = require("colors");
- y para agregarle color a un string se le pone un punto | "hola".green o "hola".yellow


CUANDO QUEREMOS USAR OTRO PC, NECESITAMOS INSTALAR TODOS ESTOS MODULOS DE NUESTRO PROYECTO | npm init, package.json y npm install (npm i), npm start
- Comando que crea la información del proyecto (package.json) | npm init
- Ese comando nos pide el nombre del paquete, la versión, una descripción, el punto de entrada de mi app, el repo de git, palabras clave de cómo pueden conseguir mi proyecto, el autor y por último me dice esta esto bien
- Y me aparece en mi proyecto un archivo | package.json | es un archivo de información sobre mi proyecto y aparecen las dependencias así sabe node que mi proyecto depende de esos módulos y los scripts podemos usar uno que nos da npm llamado start así cuando desde la console ejecute el comando npm start hace algo (en este caso inicia el servidor | node index.js)

Imaginemos que subo mi app a un server o un servicio en la nube, solo subo el código no los módulos y desde el servidor ejecuto npm install lee el package.json e instala las dependencias con npm install.

CONCEPTOS GENERALES de NPM:
- node_modules es para contener los nuevos módulos que instalamos
- package-lock.json lista que módulos se han instalado
- package.json es un archivo de configuración con información sobre mi proyecto, aparecen las dependencias así sabe node que mi proyecto depende de esos módulos, cuando ejecuten el npm install LOS INSTALA. y también tiene los scripts npm start, y cuando desde la consola ejecute el comando npm start hace algo (en este caso inicia el servidor | node modulos_node/modulo_HTTP/index.js), para scripts personalizados usamos npm run NOMBRE_COMANDO
- npm init para crear el package.json
- npm install o (npm i) | instala las dependencias necesarias para el proyecto (este comando lee el package.json)
- npm start o npm run NOMBRE_COMANDO | ejecuta lo que pongamos en el package.json en los scripts (en este caso inicia el servidor HTTP con node modulos_node/modulo_HTTP/index.js )
- npm install MODULO | instala un módulo de internet y guarda todos los módulos en la carpeta node_modules



----------------- EXPRESS ------------------
Es un framework para crear servidores sin hacerlo todo a mano y desde cero

Lo importamos, inicializo el servidor y le digo en que puerto va a escuchar luego si entran a una ruta en específico puedo responder algo con server.get("ruta", callback) el callback de ese método recibe por parametro una petición y una respuesta


 npm init "--yes" perimte instalar mas dependencias 

npm install express,
	 express-session, -- permite administra las sesiones
	cookie-parser  -- permite administrar los datos dentro del navegador 
	connect-flash -- permite mandar mensajes 
	ejs -- permite manejar js dentro del navegador, permite pintar de una froma mas rapida la interfaz, o motor de pantillas
	bcrypt-nodejs -- cifra los datos seguridad 
	body-parses --entender los datos del navegador al servidor como un json 
	morgan --permite mostrar la informacion que llege por el metodo http mediante la consola 
	mongoose -- permite crear un esquema para la base de datos ya que node es sin esquema 
	mysql -- permite crear un esquema para la base de datos 
	passport -- autrentifica los modulos dentro del servidor
	passport-local 

	nodemon -D  permite refrescar la app sin reiniciar el servidor, la -D es para las dependencias de desarrollo 


al ejecutar npm run dev refresca el servidor al hacer cambios 
"start":"node src/index.js",
"dev": "nodemon src/index.js",





trabajar con porbesas callbacks, con async await
  index: function () {
    User.find({}, function (err, users) {
      console.long("callback");
      /*
      aqui van mucghas funciones 
      las callback son llamadas asyncronas o http,
       usando codigo dificil de mantener 
      */
    });

    User.find({})
      .then(() => {})
      .catch(() => {});
    /*
      las promesas  son mucho más faciles de mantener 
      */
  },

  index: async () => {
    const users = await User.find({});
    /** esta  froma es mas simple usando async await  */
  }



****************patrones de diseño**********************************     

patrones basicos, patrones modulares, 
patrones extructurados, patrones de comportamiento
y patrones de mensajeria 


Christopher Alexander
"Cada patrón describe un problema que ocurre una y otra vez en nuestro entorno, y luego describe el núcleo de la solución a ese problema, de tal manera que se puedes usar esta solución un millón de veces, sin hacerlo de la misma froma dos veces"

Fue popularizado por la editorial de Gang of Four(GO4)

los patrones de diseño se creron para solucionar problemas 
y ser reutilizable, además de entregar una respuesta predecible, se veneficia de una interfaz mas limpia y documentasión mejor 


Singleton
"Son objetos que solo pueden tener una única  instancia: una única fuente de verdad como un único punto de acesso"


Builder
"Comprende el requisito en la expresión más fácil y lo traduce en el resultado, utilizando varios procesos internos complejos"

Factory
"Es dfinido como una interfaz para crear un onjeto que permite a las subclases decidir qué clase instancear. Este patrón también se conoce como el patrón de contructor virtual"


*******************javascript*****************************************
NO es asíincrono
multiparadigma 
-orientado a objetos pero no tanto, más bien es prototipado
-iperativo y estructurado
tipado débil


+++++++++++++++++tipos, valores y operadores+++++++++++++++
Tipos: son daatos que se pueden almacenar en la memoría.
Valores: Son valores que se puden almacenar los tipos de datos.
Opereadores:Son los elementos de un programa que sirven para asignar o producir un nuevo valor.

variables locales y globales 

1- Numbers
10, -25, 0.25, NaN, Infinity, 
(+, -, *, /, %)
(+, -, *, /) num += num1;

2- Strings
"texto", 'texto'

3-Booleans
true, false
(&&,|| <,>, <=, >=, ==, !=)
=== valida que sean iguales y del mismo tipo

4-Objects
{key: value} // dentro de las valor tambien se pueden agregar funciones con o sin objetos o algo asi 

5-Functions
function myFuction(/*valores*/){/*codigo*/}
var myAge = (function(age){return age})(22) esta encapsulado

function registro(num1, num2, num3){

argument.length// muestra los argumentos de la funcion ya que es un objeto 
}

6-Valor indefinido
(undefined, null) 

7-Más
(typeof) devuelve tipo de valor ya sea un number, string, object o fuction

8- condicionales 
if, switch

'', -0, null, 0 son falsos en condicional

9- coerción o casting
var n = '22'
vra nn = Number(n)

/*conversiones explicitas*/
var foo = '500';
var bar =parseInt(foo)
var boo = bar.toString()
/*tipos de conversiones implicitas*/
var f = 1 - '22';  retorna 21 //el menos tiene una esepción y hace la coerción
var f = 1 + '22';retorna '122'

10- ternario
(validación)? true: false;

11- bucles 
for, while, do while

12-objeto prototype

Escriba un programa que use el console.log para imprimir todos los números del 1 al 100, con dos exepciones. Para los números divisibles por 3, imprima "Fizz" en lugar del número, y para los números divisibles por 5(y no por 3), imprima "Buzz" en su lugar. Cuando tenga eso funcionando, modifique su programa para imprimir "FizzBuzz", para los números que sean divisibles por 3 y 5(y aún así iimprima "Fizz" o "Buzz") para los números divisibles por solo uno de ellos.

function FizzBuzz() {
  for (let index = 1; index <= 100; index++) {
    var result = "";
    if (index % 3 == 0) {
      result += "Fizz";
    }
    if (index % 5 == 0) {
      result += "Buzz";
    }
    console.log(result || index)
  }
}
FizzBuzz();


13-hoisting
 almacena las valribles en memoria y las funciones, en la segunda ves ejecuta todad las funciones y los console.log

valor y referencia, dos variables que alojan el mismo contenido tienen un espacio en memeria diferente 


estructura de un programa 
funciones
estructurade datos: Objetos y Arrays
funciones de orden superior
manejo de errores
ezpresiones regulares 
ecmascript 6+
obtimizacion de codigo
pruebas unitarias 





/** Más notas **/
Manejo de eventos en nodejs se usa la librería <events>
Ejecutar procesos "moverte como en la consola" require(child_proces).exec
Manejo de archivos  lectura, escritura y crear, streams  <fs>


Manejas variables de entornocon un archivo
.env  dentro de este se piden configurar información sensible como en laravel y para su uso requiere el siguiente módulo de nodejs  
require(dotenv).config() 
PROCESOS.ENV.PORT O TOKEN

Ir tutorial de los  tokens jwt


Librería underscore.js
View engine pug, mustache 
Cross-origin resource sharing (cors)